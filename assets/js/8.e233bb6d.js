(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{432:function(t,s,a){"use strict";a.r(s);var e=a(65),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("这一部分涉及事件机制、跨域、存储、缓存机制、渲染原理，性能优化和安全等内容。")]),t._v(" "),a("h2",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：如何实现跨域？")])]),t._v(" "),a("p",[t._v("浏览器中有 "),a("strong",[t._v("同源策略")]),t._v(" ，即一个域下的页面中，无法通过 Ajax 获取到其他域的接口。例如有一个接口"),a("code",[t._v("http://m.juejin.com/course/ajaxcourserecom?cid=459")]),t._v("，你自己的一个页面"),a("code",[t._v("http://www.yourname.com/page1.html")]),t._v("中的 Ajax 无法获取这个接口。这正是命中了“同源策略”。如果浏览器哪些地方忽略了同源策略，那就是浏览器的安全漏洞，需要紧急修复。")]),t._v(" "),a("p",[t._v("url 哪些地方不同算作跨域？")]),t._v(" "),a("ul",[a("li",[t._v("协议")]),t._v(" "),a("li",[t._v("域名")]),t._v(" "),a("li",[t._v("端口")])]),t._v(" "),a("p",[t._v("但是 HTML 中几个标签能逃避过同源策略——"),a("code",[t._v('<script src="xxx">')]),t._v("、"),a("code",[t._v('<img src="xxxx"/>')]),t._v("、"),a("code",[t._v('<link href="xxxx">')]),t._v("，这三个标签的"),a("code",[t._v("src/href")]),t._v("可以加载其他域的资源，不受同源策略限制。")]),t._v(" "),a("p",[t._v("因此，这使得这三个标签可以做一些特殊的事情。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<img>")]),t._v("可以做打点统计，因为统计方并不一定是同域的，在讲解 JS 基础知识异步的时候有过代码示例。除了能跨域之外，"),a("code",[t._v("<img>")]),t._v("几乎没有浏览器兼容问题，它是一个非常古老的标签。")]),t._v(" "),a("li",[a("code",[t._v("<script>")]),t._v("和"),a("code",[t._v("<link>")]),t._v("可以使用 CDN，CDN 基本都是其他域的链接。")]),t._v(" "),a("li",[t._v("另外"),a("code",[t._v("<script>")]),t._v("还可以实现 JSONP，能获取其他域接口的信息，接下来马上讲解。")])]),t._v(" "),a("p",[t._v("但是请注意，所有的跨域请求方式，最终都需要信息提供方来做出相应的支持和改动，也就是要经过信息提供方的同意才行，否则接收方是无法得到它们的信息的，浏览器是不允许的。")]),t._v(" "),a("h2",{attrs:{id:"跨域以及解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域以及解决办法"}},[t._v("#")]),t._v(" 跨域以及解决办法")]),t._v(" "),a("ul",[a("li",[t._v("原因 "),a("br"),t._v("\n浏览器的同源策略导致了跨域")]),t._v(" "),a("li",[t._v("作用 "),a("br"),t._v("\n用于隔离潜在恶意文件的重要安全机制")]),t._v(" "),a("li",[t._v("解决")])]),t._v(" "),a("ol",[a("li",[t._v("jsonp ，允许 script 加载第三方资源")]),t._v(" "),a("li",[t._v("反向代理")]),t._v(" "),a("li",[t._v("cors 前后端协作设置请求头部，Access-Control-Allow-Origin 等头部信息")]),t._v(" "),a("li",[t._v("iframe 嵌套通讯，postmessage")])]),t._v(" "),a("p",[t._v("参考资料：")]),t._v(" "),a("ul",[a("li",[t._v("https://github.com/yanyue404/blog/issues/8")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/41479807",target:"_blank",rel:"noopener noreferrer"}},[t._v("新鲜出炉的 8 月前端面试题"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享 CORS 阮一峰"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"cookie、localstorage、sessionstorage-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie、localstorage、sessionstorage-区别"}},[t._v("#")]),t._v(" cookie、localStorage、sessionStorage 区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("特性")]),t._v(" "),a("th",[t._v("cookie")]),t._v(" "),a("th",[t._v("localStorage")]),t._v(" "),a("th",[t._v("sessionStorage")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("由谁初始化")]),t._v(" "),a("td",[t._v("客户端或服务器，服务器可以使用"),a("code",[t._v("Set-Cookie")]),t._v("请求头。")]),t._v(" "),a("td",[t._v("客户端")]),t._v(" "),a("td",[t._v("客户端")])]),t._v(" "),a("tr",[a("td",[t._v("数据的生命周期")]),t._v(" "),a("td",[t._v("一般由服务器生成，可设置失效时间，如果在浏览器生成，默认是关闭浏览器之后失效")]),t._v(" "),a("td",[t._v("永久保存，可清除")]),t._v(" "),a("td",[t._v("仅在当前会话有效，关闭页面后清除")])]),t._v(" "),a("tr",[a("td",[t._v("存放数据大小")]),t._v(" "),a("td",[t._v("4KB")]),t._v(" "),a("td",[t._v("5MB")]),t._v(" "),a("td",[t._v("5MB")])]),t._v(" "),a("tr",[a("td",[t._v("与服务器通信")]),t._v(" "),a("td",[t._v("每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题")]),t._v(" "),a("td",[t._v("仅在客户端保存")]),t._v(" "),a("td",[t._v("仅在客户端保存")])]),t._v(" "),a("tr",[a("td",[t._v("用途")]),t._v(" "),a("td",[t._v("一般由服务器生成，用于标识用户身份")]),t._v(" "),a("td",[t._v("用于浏览器缓存数据")]),t._v(" "),a("td",[t._v("用于浏览器缓存数据")])]),t._v(" "),a("tr",[a("td",[t._v("访问权限")]),t._v(" "),a("td",[t._v("任意窗口")]),t._v(" "),a("td",[t._v("任意窗口")]),t._v(" "),a("td",[t._v("当前页面窗口")])])])]),t._v(" "),a("h2",{attrs:{id:"关键渲染路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键渲染路径"}},[t._v("#")]),t._v(" 关键渲染路径")]),t._v(" "),a("p",[t._v("关键渲染路径是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 文档对象模型 (DOM)，CSS 对象模型 (CSSOM)，渲染树和布局。")]),t._v(" "),a("p",[t._v("在解析 HTML 时会创建文档对象模型。HTML 可以请求 JavaScript，而 JavaScript 反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSS 对象模型。浏览器引擎将两者结合起来以创建渲染树。布局确定页面上所有内容的大小和位置。确定布局后，将像素绘制到屏幕上。")]),t._v(" "),a("p",[t._v("优化关键渲染路径可以缩短首次渲染的时间。了解和优化关键渲染路径对于确保重排和重绘可以每秒 60 帧的速度进行，以确保高效的用户交互并避免讨厌是很重要的。")]),t._v(" "),a("p",[t._v("Web 性能包含了服务器请求和响应、加载、执行脚本、渲染、布局和绘制每个像素到屏幕上。")]),t._v(" "),a("p",[t._v("网页请求从 HTML 文件请求开始。服务器返回 HTML -- 响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾 ，这时开始构造 CSS 对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path",target:"_blank",rel:"noopener noreferrer"}},[t._v("关键渲染路径"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/Performance/CSS",target:"_blank",rel:"noopener noreferrer"}},[t._v("css 性能优化"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"浏览器渲染原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染原理"}},[t._v("#")]),t._v(" 浏览器渲染原理")]),t._v(" "),a("p",[t._v("渲染过程")]),t._v(" "),a("ol",[a("li",[t._v("解析 HTML 生成 DOM 树。")]),t._v(" "),a("li",[t._v("解析 CSS 生成 CSSOM 规则树。")]),t._v(" "),a("li",[t._v("解析 JS，操作 DOM 树和 CSSOM 规则树。")]),t._v(" "),a("li",[t._v("将 DOM 树与 CSSOM 规则树合并在一起生成渲染树。")]),t._v(" "),a("li",[t._v("遍历渲染树开始布局，计算每个节点的位置大小信息。")]),t._v(" "),a("li",[t._v("浏览器将所有图层的数据发送给 GPU，GPU 将图层合成并显示在屏幕上。")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器渲染原理"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"加载页面和渲染过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载页面和渲染过程"}},[t._v("#")]),t._v(" 加载页面和渲染过程")]),t._v(" "),a("p",[t._v("可将加载过程和渲染过程分开说。回答问题的时候，关键要抓住核心的要点，把要点说全面，稍加解析即可，简明扼要不拖沓。")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：浏览器从加载页面到渲染页面的过程")])]),t._v(" "),a("h3",{attrs:{id:"加载过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载过程"}},[t._v("#")]),t._v(" 加载过程")]),t._v(" "),a("p",[t._v("要点如下：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器根据 DNS 服务器得到域名的 IP 地址")]),t._v(" "),a("li",[t._v("向这个 IP 的机器发送 HTTP 请求")]),t._v(" "),a("li",[t._v("服务器收到、处理并返回 HTTP 请求")]),t._v(" "),a("li",[t._v("浏览器得到返回内容")])]),t._v(" "),a("p",[t._v("例如在浏览器输入"),a("code",[t._v("https://juejin.im/timeline")]),t._v("，然后经过 DNS 解析，"),a("code",[t._v("juejin.im")]),t._v("对应的 IP 是"),a("code",[t._v("36.248.217.149")]),t._v("（不同时间、地点对应的 IP 可能会不同）。然后浏览器向该 IP 发送 HTTP 请求。")]),t._v(" "),a("p",[t._v("server 端接收到 HTTP 请求，然后经过计算（向不同的用户推送不同的内容），返回 HTTP 请求，返回的内容如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/2/23/161c107496accac7?w=1176&h=294&f=png&s=77020",alt:""}})]),t._v(" "),a("p",[t._v("其实就是一堆 HMTL 格式的字符串，因为只有 HTML 格式浏览器才能正确解析，这是 W3C 标准的要求。接下来就是浏览器的渲染过程。")]),t._v(" "),a("h3",{attrs:{id:"渲染过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程"}},[t._v("#")]),t._v(" 渲染过程")]),t._v(" "),a("p",[t._v("要点如下：")]),t._v(" "),a("ul",[a("li",[t._v("根据 HTML 结构生成 DOM 树")]),t._v(" "),a("li",[t._v("根据 CSS 生成 CSSOM")]),t._v(" "),a("li",[t._v("将 DOM 和 CSSOM 整合形成 RenderTree")]),t._v(" "),a("li",[t._v("根据 RenderTree 开始渲染和展示")]),t._v(" "),a("li",[t._v("遇到"),a("code",[t._v("<script>")]),t._v("时，会执行并阻塞渲染")])]),t._v(" "),a("p",[t._v("上文中，浏览器已经拿到了 server 端返回的 HTML 内容，开始解析并渲染。最初拿到的内容就是一堆字符串，必须先结构化成计算机擅长处理的基本数据结构，因此要把 HTML 字符串转化成 DOM 树 —— 树是最基本的数据结构之一。")]),t._v(" "),a("p",[t._v("解析过程中，如果遇到"),a("code",[t._v('<link href="...">')]),t._v("和"),a("code",[t._v('<script src="...">')]),t._v("这种外链加载 CSS 和 JS 的标签，浏览器会异步下载，下载过程和上文中下载 HTML 的流程一样。只不过，这里下载下来的字符串是 CSS 或者 JS 格式的。")]),t._v(" "),a("p",[t._v("浏览器将 CSS 生成 CSSOM，再将 DOM 和 CSSOM 整合成 RenderTree ，然后针对 RenderTree 即可进行渲染了。大家可以想一下，有 DOM 结构、有样式，此时就能满足渲染的条件了。另外，这里也可以解释一个问题 —— "),a("strong",[t._v("为何要将 CSS 放在 HTML 头部？")]),t._v("—— 这样会让浏览器尽早拿到 CSS 尽早生成 CSSOM，然后在解析 HTML 之后可一次性生成最终的 RenderTree，渲染一次即可。如果 CSS 放在 HTML 底部，会出现渲染卡顿的情况，影响性能和体验。")]),t._v(" "),a("p",[t._v("最后，渲染过程中，如果遇到"),a("code",[t._v("<script>")]),t._v("就停止渲染，执行 JS 代码。因为浏览器渲染和 JS 执行共用一个线程，而且这里必须是单线程操作，多线程会产生渲染 DOM 冲突。待"),a("code",[t._v("<script>")]),t._v("内容执行完之后，浏览器继续渲染。最后再思考一个问题 —— "),a("strong",[t._v("为何要将 JS 放在 HTML 底部？")]),t._v("—— JS 放在底部可以保证让浏览器优先渲染完现有的 HTML 内容，让用户先看到内容，体验好。另外，JS 执行如果涉及 DOM 操作，得等待 DOM 解析完成才行，JS 放在底部执行时，HTML 肯定都解析成了 DOM 结构。JS 如果放在 HTML 顶部，JS 执行的时候 HTML 还没来得及转换为 DOM 结构，可能会报错。")]),t._v(" "),a("p",[t._v("关于浏览器整个流程，百度的多益大神有更加详细的文章，推荐阅读下：《"),a("a",{attrs:{href:"http://fex.baidu.com/blog/2014/05/what-happen/",target:"_blank",rel:"noopener noreferrer"}},[t._v("从输入 URL 到页面加载完成的过程中都发生了什么事情？"),a("OutboundLink")],1),t._v(" 》。")]),t._v(" "),a("h2",{attrs:{id:"浏览器缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[t._v("#")]),t._v(" 浏览器缓存机制")]),t._v(" "),a("p",[t._v("缓存可以说是性能优化中"),a("strong",[t._v("简单高效")]),t._v("的一种优化方式了，它可以"),a("strong",[t._v("显著减少网络传输所带来的损耗")]),t._v("。")]),t._v(" "),a("p",[t._v("对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。")]),t._v(" "),a("p",[t._v("接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：")]),t._v(" "),a("ul",[a("li",[t._v("缓存位置")]),t._v(" "),a("li",[t._v("缓存策略")]),t._v(" "),a("li",[t._v("实际场景应用缓存策略")])]),t._v(" "),a("h2",{attrs:{id:"缓存位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[t._v("#")]),t._v(" 缓存位置")]),t._v(" "),a("p",[t._v("从缓存位置上来说分为四种，并且各自有"),a("strong",[t._v("优先级")]),t._v("，当依次查找缓存且都没有命中的时候，才会去请求网络")]),t._v(" "),a("ol",[a("li",[t._v("Service Worker")]),t._v(" "),a("li",[t._v("Memory Cache")]),t._v(" "),a("li",[t._v("Disk Cache")]),t._v(" "),a("li",[t._v("Push Cache")]),t._v(" "),a("li",[t._v("网络请求")])]),t._v(" "),a("h3",{attrs:{id:"service-worker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[t._v("#")]),t._v(" Service Worker")]),t._v(" "),a("p",[t._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们"),a("strong",[t._v("自由控制")]),t._v("缓存哪些文件、如何匹配缓存、如何读取缓存，并且"),a("strong",[t._v("缓存是持续性的")]),t._v("。")]),t._v(" "),a("p",[t._v("当 Service Worker 没有命中缓存的时候，我们需要去调用 "),a("code",[t._v("fetch")]),t._v(" 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。"),a("strong",[t._v("但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。")])]),t._v(" "),a("h3",{attrs:{id:"memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" Memory Cache")]),t._v(" "),a("p",[t._v("Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。"),a("strong",[t._v("但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。")]),t._v(" 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),t._v(" "),a("p",[t._v("当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存")]),t._v(" "),a("p",[t._v("从内存中读取缓存")]),t._v(" "),a("p",[t._v("那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？")]),t._v(" "),a("p",[t._v("先说结论，这是"),a("strong",[t._v("不可能")]),t._v("的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很"),a("strong",[t._v("玄学")]),t._v("了，我查阅了很多资料都没有一个定论。")]),t._v(" "),a("p",[t._v("当然，我通过一些实践和猜测也得出了一些结论：")]),t._v(" "),a("ul",[a("li",[t._v("对于大文件来说，大概率是不存储在内存中的，反之优先")]),t._v(" "),a("li",[t._v("当前系统内存使用率高的话，文件优先存储进硬盘")])]),t._v(" "),a("h3",{attrs:{id:"disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[t._v("#")]),t._v(" Disk Cache")]),t._v(" "),a("p",[t._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache "),a("strong",[t._v("胜在容量和存储时效性上。")])]),t._v(" "),a("p",[t._v("在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。"),a("strong",[t._v("并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。")])]),t._v(" "),a("h3",{attrs:{id:"push-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[t._v("#")]),t._v(" Push Cache")]),t._v(" "),a("p",[t._v("Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。"),a("strong",[t._v("并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。")])]),t._v(" "),a("p",[t._v("Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 "),a("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fjakearchibald.com%2F2017%2Fh2-push-tougher-than-i-thought%2F",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 push is tougher than I thought"),a("OutboundLink")],1),t._v(" 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读")]),t._v(" "),a("ul",[a("li",[t._v("所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好")]),t._v(" "),a("li",[t._v("可以推送 "),a("code",[t._v("no-cache")]),t._v(" 和 "),a("code",[t._v("no-store")]),t._v(" 的资源")]),t._v(" "),a("li",[t._v("一旦连接被关闭，Push Cache 就被释放")]),t._v(" "),a("li",[t._v("多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存")]),t._v(" "),a("li",[t._v("Push Cache 中的缓存只能被使用一次")]),t._v(" "),a("li",[t._v("浏览器可以拒绝接受已经存在的资源推送")]),t._v(" "),a("li",[t._v("你可以给其他域名推送资源")])]),t._v(" "),a("h3",{attrs:{id:"网络请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[t._v("#")]),t._v(" 网络请求")]),t._v(" "),a("p",[t._v("如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。")]),t._v(" "),a("p",[t._v("那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。")]),t._v(" "),a("h2",{attrs:{id:"缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[t._v("#")]),t._v(" 缓存策略")]),t._v(" "),a("p",[t._v("通常浏览器缓存策略分为两种："),a("strong",[t._v("强缓存")]),t._v("和"),a("strong",[t._v("协商缓存")]),t._v("，并且缓存策略都是通过设置 HTTP Header 来实现的。")]),t._v(" "),a("h3",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),a("p",[t._v("强缓存可以通过设置两种 HTTP Header 实现："),a("code",[t._v("Expires")]),t._v(" 和 "),a("code",[t._v("Cache-Control")]),t._v(" 。强缓存表示在缓存期间不需要请求，"),a("code",[t._v("state code")]),t._v(" 为 200。")]),t._v(" "),a("h4",{attrs:{id:"expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),a("p",[t._v("Expires: Wed, 22 Oct 2018 08:41:00 GMT")]),t._v(" "),a("p",[a("code",[t._v("Expires")]),t._v(" 是 HTTP/1 的产物，表示资源会在 "),a("code",[t._v("Wed, 22 Oct 2018 08:41:00 GMT")]),t._v(" 后过期，需要再次请求。并且 "),a("code",[t._v("Expires")]),t._v(" "),a("strong",[t._v("受限于本地时间")]),t._v("，如果修改了本地时间，可能会造成缓存失效。")]),t._v(" "),a("h4",{attrs:{id:"cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-control")]),t._v(" "),a("p",[t._v("Cache-control: max-age=30")]),t._v(" "),a("p",[a("code",[t._v("Cache-Control")]),t._v(" 出现于 HTTP/1.1，"),a("strong",[t._v("优先级高于 "),a("code",[t._v("Expires")])]),t._v(" 。该属性值表示资源会在 30 秒后过期，需要再次请求。")]),t._v(" "),a("p",[a("code",[t._v("Cache-Control")]),t._v(" "),a("strong",[t._v("可以在请求头或者响应头中设置")]),t._v("，并且可以组合使用多种指令")]),t._v(" "),a("p",[t._v("多种指令配合流程图")]),t._v(" "),a("p",[t._v("从图中我们可以看到，我们可以将"),a("strong",[t._v("多个指令配合起来一起使用")]),t._v("，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。")]),t._v(" "),a("p",[t._v("常见指令作用")]),t._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("p",[t._v("如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现："),a("code",[t._v("Last-Modified")]),t._v(" 和 "),a("code",[t._v("ETag")]),t._v(" 。")]),t._v(" "),a("p",[t._v("当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。")]),t._v(" "),a("p",[a("strong",[t._v("协商缓存")])]),t._v(" "),a("h4",{attrs:{id:"last-modified-和-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since"}},[t._v("#")]),t._v(" Last-Modified 和 If-Modified-Since")]),t._v(" "),a("p",[a("code",[t._v("Last-Modified")]),t._v(" 表示本地文件最后修改日期，"),a("code",[t._v("If-Modified-Since")]),t._v(" 会将 "),a("code",[t._v("Last-Modified")]),t._v(" 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。")]),t._v(" "),a("p",[t._v("但是 "),a("code",[t._v("Last-Modified")]),t._v(" 存在一些弊端：")]),t._v(" "),a("ul",[a("li",[t._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 "),a("code",[t._v("Last-Modified")]),t._v(" 被修改，服务端不能命中缓存导致发送相同的资源")]),t._v(" "),a("li",[t._v("因为 "),a("code",[t._v("Last-Modified")]),t._v(" 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源")])]),t._v(" "),a("p",[t._v("因为以上这些弊端，所以在 HTTP / 1.1 出现了 "),a("code",[t._v("ETag")]),t._v(" 。")]),t._v(" "),a("h4",{attrs:{id:"etag-和-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match"}},[t._v("#")]),t._v(" ETag 和 If-None-Match")]),t._v(" "),a("p",[a("code",[t._v("ETag")]),t._v(" 类似于文件指纹，"),a("code",[t._v("If-None-Match")]),t._v(" 会将当前 "),a("code",[t._v("ETag")]),t._v(" 发送给服务器，询问该资源 "),a("code",[t._v("ETag")]),t._v(" 是否变动，有变动的话就将新的资源发送回来。并且 "),a("code",[t._v("ETag")]),t._v(" 优先级比 "),a("code",[t._v("Last-Modified")]),t._v(" 高。")]),t._v(" "),a("p",[t._v("以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。"),a("strong",[t._v("如果什么缓存策略都没设置，那么浏览器会怎么处理？")])]),t._v(" "),a("p",[t._v("对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 "),a("code",[t._v("Date")]),t._v(" 减去 "),a("code",[t._v("Last-Modified")]),t._v(" 值的 10% 作为缓存时间。")]),t._v(" "),a("h2",{attrs:{id:"实际场景应用缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际场景应用缓存策略"}},[t._v("#")]),t._v(" 实际场景应用缓存策略")]),t._v(" "),a("p",[t._v("单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。")]),t._v(" "),a("h3",{attrs:{id:"频繁变动的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#频繁变动的资源"}},[t._v("#")]),t._v(" 频繁变动的资源")]),t._v(" "),a("p",[t._v("对于频繁变动的资源，首先需要使用 "),a("code",[t._v("Cache-Control: no-cache")]),t._v(" 使浏览器每次都请求服务器，然后配合 "),a("code",[t._v("ETag")]),t._v(" 或者 "),a("code",[t._v("Last-Modified")]),t._v(" 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")]),t._v(" "),a("h3",{attrs:{id:"代码文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码文件"}},[t._v("#")]),t._v(" 代码文件")]),t._v(" "),a("p",[t._v("这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。")]),t._v(" "),a("p",[t._v("一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 "),a("code",[t._v("Cache-Control: max-age=31536000")]),t._v("，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。")]),t._v(" "),a("h2",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),a("p",[t._v("性能优化的题目也是面试常考的，这类题目有很大的扩展性，能够扩展出来很多小细节，而且对个人的技术视野和业务能力有很大的挑战。这部分笔者会重点讲下常用的性能优化方案。")]),t._v(" "),a("blockquote",[a("p",[t._v("题目：总结前端性能优化的解决方案")])]),t._v(" "),a("h3",{attrs:{id:"优化原则和方向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化原则和方向"}},[t._v("#")]),t._v(" 优化原则和方向")]),t._v(" "),a("p",[t._v("性能优化的原则是"),a("strong",[t._v("以更好的用户体验为标准")]),t._v("，具体就是实现下面的目标：")]),t._v(" "),a("ol",[a("li",[t._v("多使用内存、缓存或者其他方法")]),t._v(" "),a("li",[t._v("减少 CPU 和 GPU 计算，更快展现")])]),t._v(" "),a("p",[t._v("优化的方向有两个：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("减少页面体积，提升网络加载")])]),t._v(" "),a("li",[a("strong",[t._v("优化页面渲染")])])]),t._v(" "),a("h3",{attrs:{id:"减少页面体积-提升网络加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少页面体积-提升网络加载"}},[t._v("#")]),t._v(" 减少页面体积，提升网络加载")]),t._v(" "),a("ul",[a("li",[t._v("静态资源的压缩合并（JS 代码压缩合并、CSS 代码压缩合并、雪碧图）")]),t._v(" "),a("li",[t._v("静态资源缓存（资源名称加 MD5 戳）")]),t._v(" "),a("li",[t._v("使用 CDN 让资源加载更快")])]),t._v(" "),a("h3",{attrs:{id:"优化页面渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化页面渲染"}},[t._v("#")]),t._v(" 优化页面渲染")]),t._v(" "),a("ul",[a("li",[t._v("CSS 放前面，JS 放后面")]),t._v(" "),a("li",[t._v("懒加载（图片懒加载、下拉加载更多）")]),t._v(" "),a("li",[t._v("减少 DOM 查询，对 DOM 查询做缓存")]),t._v(" "),a("li",[t._v("减少 DOM 操作，多个操作尽量合并在一起执行（"),a("code",[t._v("DocumentFragment")]),t._v("）")]),t._v(" "),a("li",[t._v("事件节流")]),t._v(" "),a("li",[t._v("尽早执行操作（"),a("code",[t._v("DOMContentLoaded")]),t._v("）")]),t._v(" "),a("li",[t._v("使用 SSR 后端渲染，数据直接输出到 HTML 中，减少浏览器使用 JS 模板渲染页面 HTML 的时间")])]),t._v(" "),a("h3",{attrs:{id:"详细解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详细解释"}},[t._v("#")]),t._v(" 详细解释")]),t._v(" "),a("h4",{attrs:{id:"静态资源的压缩合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态资源的压缩合并"}},[t._v("#")]),t._v(" 静态资源的压缩合并")]),t._v(" "),a("p",[t._v("如果不合并，每个都会走一遍之前介绍的请求过程")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("如果合并了，就只走一遍请求过程")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h4",{attrs:{id:"静态资源缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态资源缓存"}},[t._v("#")]),t._v(" 静态资源缓存")]),t._v(" "),a("p",[t._v("通过链接名称控制缓存")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc_1.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("只有内容改变的时候，链接名称才会改变")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc_2.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("这个名称不用手动改，可通过前端构建工具根据文件内容，为文件名称添加 MD5 后缀。")]),t._v(" "),a("h4",{attrs:{id:"使用-cdn-让资源加载更快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-cdn-让资源加载更快"}},[t._v("#")]),t._v(" 使用 CDN 让资源加载更快")]),t._v(" "),a("p",[t._v("CDN 会提供专业的加载优化方案，静态资源要尽量放在 CDN 上。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h4",{attrs:{id:"使用-ssr-后端渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-ssr-后端渲染"}},[t._v("#")]),t._v(" 使用 SSR 后端渲染")]),t._v(" "),a("p",[t._v("可一次性输出 HTML 内容，不用在页面渲染完成之后，再通过 Ajax 加载数据、再渲染。例如使用 smarty、Vue SSR 等。")]),t._v(" "),a("h4",{attrs:{id:"css-放前面-js-放后面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-放前面-js-放后面"}},[t._v("#")]),t._v(" CSS 放前面，JS 放后面")]),t._v(" "),a("p",[t._v("上文讲述浏览器渲染过程时已经提过，不再赘述。")]),t._v(" "),a("h4",{attrs:{id:"懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[t._v("#")]),t._v(" 懒加载")]),t._v(" "),a("p",[t._v("一开始先给为 "),a("code",[t._v("src")]),t._v(" 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片。如下，"),a("code",[t._v("preview.png")]),t._v("是预览图片，比较小，加载很快，而且很多图片都共用这个"),a("code",[t._v("preview.png")]),t._v("，加载一次即可。待页面下拉，图片显示出来时，再去替换"),a("code",[t._v("src")]),t._v("为"),a("code",[t._v("data-realsrc")]),t._v("的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"preview.png"')]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("realsrc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc.png"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("另外，这里为何要用"),a("code",[t._v("data-")]),t._v("开头的属性值？—— 所有 HTML 中自定义的属性，都应该用"),a("code",[t._v("data-")]),t._v("开头，因为"),a("code",[t._v("data-")]),t._v("开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。")]),t._v(" "),a("h4",{attrs:{id:"dom-查询做缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-查询做缓存"}},[t._v("#")]),t._v(" DOM 查询做缓存")]),t._v(" "),a("p",[t._v("两段代码做一下对比：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只查询一个 DOM ，缓存在 pList 中了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" pList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次循环，都会查询 DOM ，耗费性能")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，应尽量减少。")]),t._v(" "),a("h4",{attrs:{id:"合并-dom-插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并-dom-插入"}},[t._v("#")]),t._v(" 合并 DOM 插入")]),t._v(" "),a("p",[t._v("DOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入 DOM。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" listNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要插入 10 个 li 标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" frag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDocumentFragment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" li"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  li "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"li"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  li"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"List item "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  frag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("li"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先放在 frag 中，最后一次性插入到 DOM 结构中。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlistNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("frag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"事件节流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件节流"}},[t._v("#")]),t._v(" 事件节流")]),t._v(" "),a("p",[t._v("例如要在文字改变时触发一个 change 事件，通过 keyup 来监听。使用节流。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" textarea "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timeoutId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntextarea"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keyup"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeoutId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeoutId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  timeoutId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发 change 事件")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"尽早执行操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尽早执行操作"}},[t._v("#")]),t._v(" 尽早执行操作")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"load"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 页面的全部资源加载完才会执行，包括图片、视频等")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DOMContentLoaded"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 渲染完即可执行，此时图片、视频还可能没有加载完")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"性能优化怎么做"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化怎么做"}},[t._v("#")]),t._v(" 性能优化怎么做")]),t._v(" "),a("p",[t._v("上面提到的都是性能优化的单个点，性能优化项目具体实施起来，应该按照下面步骤推进：")]),t._v(" "),a("ol",[a("li",[t._v("建立性能数据收集平台，摸底当前性能数据，通过性能打点，将上述整个页面打开过程消耗时间记录下来")]),t._v(" "),a("li",[t._v("分析耗时较长时间段原因，寻找优化点，确定优化目标")]),t._v(" "),a("li",[t._v("开始优化")]),t._v(" "),a("li",[t._v("通过数据收集平台记录优化效果")]),t._v(" "),a("li",[t._v("不断调整优化点和预期目标，循环 2~4 步骤")])]),t._v(" "),a("p",[t._v("性能优化是个长期的事情，不是一蹴而就的，应该本着先摸底、再分析、后优化的原则逐步来做。")]),t._v(" "),a("p",[t._v("我的文章")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/yanyue404/blog/issues/120",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端思考 —— 性能优化 "),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"web-安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-安全"}},[t._v("#")]),t._v(" Web 安全")]),t._v(" "),a("h2",{attrs:{id:"xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),a("blockquote",[a("p",[t._v("涉及面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？")])]),t._v(" "),a("p",[t._v("XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。")]),t._v(" "),a("p",[t._v("XSS 可以分为多种类型，但是总体上我认为分为两类："),a("strong",[t._v("持久型和非持久型")]),t._v("。")]),t._v(" "),a("p",[t._v("持久型也就是攻击的代码被服务端写入进"),a("strong",[t._v("数据库")]),t._v("中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。")]),t._v(" "),a("p",[t._v("举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容")]),t._v(" "),a("p",[t._v("这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。")]),t._v(" "),a("p",[t._v("非持久型相比于前者危害就小的多了，一般通过"),a("strong",[t._v("修改 URL 参数")]),t._v("的方式加入攻击代码，诱导用户访问链接从而进行攻击。")]),t._v(" "),a("p",[t._v("举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!-- http://www.domain.com?name=<script>alert(1)<\/script> --\x3e <div>{{name}}</div>\n")])])]),a("p",[t._v("但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。")]),t._v(" "),a("p",[t._v("对于 XSS 攻击来说，通常有两种方式可以用来防御。")]),t._v(" "),a("h3",{attrs:{id:"转义字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[t._v("#")]),t._v(" 转义字符")]),t._v(" "),a("p",[t._v("首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&amp;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&lt;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&gt;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&quto;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("'")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&#39;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&#96;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\/")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&#x2F;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过转义可以将攻击代码 "),a("code",[t._v("<script>alert(1)<\/script>")]),t._v(" 变成")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" // -> &lt;script&gt;alert(1)&lt;&#x2F;script&gt;\n escape('<script>alert(1)<\/script>')\n")])])]),a("p",[t._v("但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" xss "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xss"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xss")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\'')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("以上示例使用了 "),a("code",[t._v("js-xss")]),t._v(" 来实现，可以看到在输出中保留了 "),a("code",[t._v("h1")]),t._v(" 标签且过滤了 "),a("code",[t._v("script")]),t._v(" 标签。")]),t._v(" "),a("h3",{attrs:{id:"csp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csp"}},[t._v("#")]),t._v(" CSP")]),t._v(" "),a("p",[t._v("CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。")]),t._v(" "),a("p",[t._v("通常可以通过两种方式来开启 CSP：")]),t._v(" "),a("ol",[a("li",[t._v("设置 HTTP Header 中的 "),a("code",[t._v("Content-Security-Policy")])]),t._v(" "),a("li",[t._v("设置 "),a("code",[t._v("meta")]),t._v(" 标签的方式 "),a("code",[t._v('<meta http-equiv="Content-Security-Policy">')])])]),t._v(" "),a("p",[t._v("这里以设置 HTTP Header 来举例")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("只允许加载本站资源")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Content-Security-Policy: default-src ‘self’\n")])])])]),t._v(" "),a("li",[a("p",[t._v("只允许加载 HTTPS 协议图片")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Content-Security-Policy: img-src https://*\n")])])])]),t._v(" "),a("li",[a("p",[t._v("允许加载任何来源框架")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Content-Security-Policy: child-src 'none'\n")])])])])]),t._v(" "),a("p",[t._v("当然可以设置的属性远不止这些，你可以通过查阅 "),a("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FContent-Security-Policy",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),a("OutboundLink")],1),t._v(" 的方式来学习，这里就不过多赘述其他的属性了。")]),t._v(" "),a("p",[t._v("对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。")]),t._v(" "),a("h2",{attrs:{id:"csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),a("blockquote",[a("p",[t._v("涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？")])]),t._v(" "),a("p",[t._v("CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。")]),t._v(" "),a("p",[t._v("举个例子，假设网站中有一个通过 "),a("code",[t._v("GET")]),t._v(" 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("<img src=\"http://www.domain.com/xxx?comment='attack'\"/>\n")])])]),a("p",[t._v("那么你是否会想到使用 "),a("code",[t._v("POST")]),t._v(" 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 "),a("code",[t._v("POST")]),t._v(" 请求。")]),t._v(" "),a("h3",{attrs:{id:"如何防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何防御"}},[t._v("#")]),t._v(" 如何防御")]),t._v(" "),a("p",[t._v("防范 CSRF 攻击可以遵循以下几种规则：")]),t._v(" "),a("ol",[a("li",[t._v("Get 请求不对数据进行修改")]),t._v(" "),a("li",[t._v("不让第三方网站访问到用户 Cookie")]),t._v(" "),a("li",[t._v("阻止第三方网站请求接口")]),t._v(" "),a("li",[t._v("请求时附带验证信息，比如验证码或者 Token")])]),t._v(" "),a("h4",{attrs:{id:"samesite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#samesite"}},[t._v("#")]),t._v(" SameSite")]),t._v(" "),a("p",[t._v("可以对 Cookie 设置 "),a("code",[t._v("SameSite")]),t._v(" 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。")]),t._v(" "),a("h4",{attrs:{id:"验证-referer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证-referer"}},[t._v("#")]),t._v(" 验证 Referer")]),t._v(" "),a("p",[t._v("对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。")]),t._v(" "),a("h4",{attrs:{id:"token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" Token")]),t._v(" "),a("p",[t._v("服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。")]),t._v(" "),a("h2",{attrs:{id:"点击劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点击劫持"}},[t._v("#")]),t._v(" 点击劫持")]),t._v(" "),a("blockquote",[a("p",[t._v("涉及面试题：什么是点击劫持？如何防范点击劫持？")])]),t._v(" "),a("p",[t._v("点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 "),a("code",[t._v("iframe")]),t._v(" 嵌套的方式嵌入自己的网页中，并将 "),a("code",[t._v("iframe")]),t._v(" 设置为透明，在页面中透出一个按钮诱导用户点击。")]),t._v(" "),a("p",[t._v("对于这种攻击方式，推荐防御的方法有两种。")]),t._v(" "),a("h3",{attrs:{id:"x-frame-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x-frame-options"}},[t._v("#")]),t._v(" X-FRAME-OPTIONS")]),t._v(" "),a("p",[a("code",[t._v("X-FRAME-OPTIONS")]),t._v(" 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 "),a("code",[t._v("iframe")]),t._v(" 嵌套的点击劫持攻击。")]),t._v(" "),a("p",[t._v("该响应头有三个值可选，分别是")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("DENY")]),t._v("，表示页面不允许通过 "),a("code",[t._v("iframe")]),t._v(" 的方式展示")]),t._v(" "),a("li",[a("code",[t._v("SAMEORIGIN")]),t._v("，表示页面可以在相同域名下通过 "),a("code",[t._v("iframe")]),t._v(" 的方式展示")]),t._v(" "),a("li",[a("code",[t._v("ALLOW-FROM")]),t._v("，表示页面可以在指定来源的 "),a("code",[t._v("iframe")]),t._v(" 中展示")])]),t._v(" "),a("h3",{attrs:{id:"js-防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-防御"}},[t._v("#")]),t._v(" JS 防御")]),t._v(" "),a("p",[t._v("对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("style id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"click-jack"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" none "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("important"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click-jack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          top"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("以上代码的作用就是当通过 "),a("code",[t._v("iframe")]),t._v(" 的方式加载页面时，攻击者的网页直接不显示所有内容了。")]),t._v(" "),a("h2",{attrs:{id:"中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[t._v("#")]),t._v(" 中间人攻击")]),t._v(" "),a("blockquote",[a("p",[t._v("涉及面试题：什么是中间人攻击？如何防范中间人攻击？")])]),t._v(" "),a("p",[t._v("中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。")]),t._v(" "),a("p",[t._v("通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。")]),t._v(" "),a("p",[t._v("当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。")]),t._v(" "),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),a("ul",[a("li",[t._v("Web 前端面试指南与高频考题解析")]),t._v(" "),a("li",[t._v("前端面试之道")])])])}),[],!1,null,null,null);s.default=r.exports}}]);